{"version":3,"sources":["components/BookCard.js","components/ShowBook.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","maxWidth","theme","createMuiTheme","BookCard","book","classes","className","Card","elevation","CardActionArea","CardMedia","component","alt","minHeight","maxHeight","minWidth","image","img","CardContent","Typography","gutterBottom","variant","title","color","author","CardActions","Grid","style","testAlign","onClick","alert","yellow","ShowBook","props","padding","container","spacing","books","map","index","key","item","xs","sm","lg","responsiveFontSizes","App","useState","setBooks","useEffect","fetch","then","response","json","catch","err","console","log","flexGrow","palette","primary","teal","secondary","grey","AppBar","position","background","Toolbar","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sUAaMA,EAAYC,YAAW,CACzBC,KAAM,CACJC,SAAU,OAIZC,EAAQC,cAGG,SAASC,EAASC,GAE/B,IAAMC,EAAUR,IAEhB,OACE,yBAAKS,UAAU,YACX,kBAACC,EAAA,EAAD,CAAMD,UAAWD,EAAQN,KAAMS,UAAW,GAC1C,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACAC,UAAU,MACVC,IAAI,QACJC,UAAU,KACVC,UAAU,KACVC,SAAS,KACTf,SAAS,KACTgB,MAAOZ,EAAKa,MAEZ,kBAACC,EAAA,EAAD,CAAajB,MAAOA,GAChB,kBAACkB,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKV,UAAU,MAC3CP,EAAKkB,OAEV,kBAACH,EAAA,EAAD,CAAYE,QAAQ,KAAKE,MAAM,gBAAgBZ,UAAU,KACpDP,EAAKoB,UAIlB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAACC,UAAU,WACpB,kBAAC,IAAD,CAAgBC,QAAS,kBAAKC,MAAM,SAAUH,MAAO,CAACJ,MAAOQ,IAAO,YC9CrE,SAASC,EAASC,GAC7B,OACI,yBAAK3B,UAAU,YACX,kBAACoB,EAAA,EAAD,CAAMC,MAAO,CAACO,QAAQ,OAAQX,MAAO,WAAYY,WAAS,EAACC,QAAS,IACnEH,EAAMI,MAAMC,KAAI,SAAClC,EAAMmC,GAAP,OACb,kBAACb,EAAA,EAAD,CAAMc,IAAKD,EAAOE,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC1C,kBAACzC,EAAD,CAAUmB,MAAOlB,EAAKkB,MAAOE,OAAQpB,EAAKoB,OAAQP,IAAKb,EAAKa,YDU5EhB,EAAQ4C,YAAoB5C,G,sDEkCb6C,MA7Cf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNV,EADM,KACCW,EADD,KAIbC,qBAAU,WACRC,MAAM,mCACLC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACC,GACLJ,EAASI,MAEVE,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAC1B,IAGA,IASMlD,EATYP,aAAW,SAAAG,GAAK,MAAK,CACrCF,KAAM,CACJ2D,SAAU,GAEZC,QAAS,CACPC,QAASC,IAAK,KACdC,UAAWC,IAAK,SAGJlE,GAElB,OACE,yBAAKS,UAAU,OACb,gCACE,yBAAKA,UAAWD,EAAQN,MACpB,kBAACiE,EAAA,EAAD,CAAQC,SAAS,SAAStC,MAAO,CAACuC,WAAY,YAC1C,kBAACC,EAAA,EAAD,CAAS9C,QAAQ,SACjB,kBAACF,EAAA,EAAD,CAAYE,QAAQ,KAAKM,MAAO,CAACJ,MAAO,YAAxC,gCAOV,kBAACS,EAAD,CAAUK,MAAOA,MCrCH+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEd3B,OAAM,SAAA4B,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.8018bd73.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles, createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\n//import StarIcon from '@material-ui/icons/Star';\nimport { yellow } from '@material-ui/core/colors';\nimport { Grid } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n    root: {\n      maxWidth: 600,\n    },\n  });\n\nlet theme = createMuiTheme();\ntheme = responsiveFontSizes(theme);\n\nexport default function BookCard(book) {\n    \n  const classes = useStyles();\n\n  return (\n    <div className=\"BookCard\">\n        <Card className={classes.root} elevation={3}>\n        <CardActionArea>\n            <CardMedia\n            component=\"img\"\n            alt=\"books\"\n            minHeight=\"50\"            \n            maxHeight=\"50\"            \n            minWidth=\"50\"            \n            maxWidth=\"50\"            \n            image={book.img}\n            />\n            <CardContent theme={theme}>\n                <Typography gutterBottom variant=\"h4\" component=\"h2\">\n                    {book.title}\n                </Typography>\n                <Typography variant=\"h6\" color=\"textSecondary\" component=\"p\">\n                    {book.author}\n                </Typography>\n            </CardContent>\n        </CardActionArea>\n        <CardActions>\n            <Grid style={{testAlign:'center'}}>\n                <StarBorderIcon onClick={()=>(alert(\"test\"))} style={{color: yellow[600]}} />\n            </Grid>\n        </CardActions>\n        </Card>\n    </div>\n  );\n}","import React from 'react';\nimport BookCard from './BookCard';\nimport Grid from '@material-ui/core/Grid';\n\nexport default function ShowBook(props) {\n    return(\n        <div className=\"ShowBook\">\n            <Grid style={{padding:'24px', color: '#455a64'}} container spacing={10}>\n            {props.books.map((book, index) =>\n                <Grid key={index} item xs={12} sm={4} lg={4}>\n                <BookCard title={book.title} author={book.author} img={book.img} />\n                </Grid>\n            )}\n            </Grid>\n        </div>\n    );\n}","import React, {useState, useEffect} from 'react';\nimport ShowBook from './components/ShowBook';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport teal from '@material-ui/core/colors/teal';\nimport grey from '@material-ui/core/colors/grey';\n\nfunction App() {\n  const [books, setBooks] = useState([]);\n\n  //fetch with the backend\n  useEffect(() => {\n    fetch('http://localhost:8888/api/books')\n    .then((response) => {\n      return response.json();\n    })\n    .then((response) => {\n      setBooks(response);\n    })\n    .catch(err => console.log(err))\n  },[]);\n\n  //header\n    const useStyles = makeStyles(theme => ({\n      root: {\n        flexGrow: 1,\n      },\n      palette: {\n        primary: teal[400],\n        secondary: grey[800]\n      }\n    }));\n    const classes = useStyles();\n\n  return(\n    <div className=\"App\">\n      <header>\n        <div className={classes.root}>\n            <AppBar position=\"static\" style={{background: '#78909c'}}>\n                <Toolbar variant=\"dense\">\n                <Typography variant=\"h6\" style={{color: '#eceff1'}}>\n                  La biblioteca de Sondeos\n                </Typography>\n                </Toolbar>\n            </AppBar>\n        </div>\n      </header>\n      <ShowBook books={books} />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}