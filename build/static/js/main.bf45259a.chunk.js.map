{"version":3,"sources":["components/BookCard.js","components/ShowBook.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","maxWidth","maxHeight","media","minWidth","minHeight","createMuiTheme","BookCard","book","useState","starIcon","setStarIcon","classes","className","style","textAlign","Card","elevation","CardActionArea","CardMedia","component","alt","image","img","CardContent","Typography","gutterBottom","variant","title","color","author","CardActions","IconButton","onClick","yellow","grey","fontSize","responsiveFontSizes","ShowBook","props","Grid","padding","container","spacing","books","length","map","index","key","item","xs","sm","md","lg","App","setBooks","useEffect","fetch","then","response","json","catch","err","console","log","flexGrow","palette","primary","teal","secondary","AppBar","position","background","Toolbar","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"+UAYMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,IACVC,UAAW,KAEbC,MAAO,CACLF,SAAU,IACVG,SAAU,IACVF,UAAW,IACXG,UAAW,SAIXN,EAAQO,cAGG,SAASC,EAASC,GAAO,IAAD,EACLC,oBAAS,GADJ,mBAC9BC,EAD8B,KACpBC,EADoB,KAE/BC,EAAUf,IAKhB,OACE,yBAAKgB,UAAU,WAAWC,MAAO,CAACC,UAAW,WACzC,kBAACC,EAAA,EAAD,CAAMH,UAAWD,EAAQZ,KAAMiB,UAAW,GACxC,kBAACC,EAAA,EAAD,KACM,kBAACC,EAAA,EAAD,CACEN,UAAWD,EAAQT,MACnBiB,UAAU,MACVC,IAAI,QACJC,MAAOd,EAAKe,MAGhB,kBAACC,EAAA,EAAD,CAAazB,MAAOA,GAChB,kBAAC0B,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKP,UAAU,MAC3CZ,EAAKoB,OAEV,kBAACH,EAAA,EAAD,CAAYE,QAAQ,KAAKE,MAAM,gBAAgBT,UAAU,KACpDZ,EAAKsB,UAIhB,kBAACC,EAAA,EAAD,KACM,kBAACC,EAAA,EAAD,CAAYC,QAzBZ,WACdtB,GAAaD,IAwB+BI,MAAO,CAACe,MAAOnB,EAAWwB,IAAO,KAAOC,IAAK,OACzE,kBAAC,IAAD,CAAUC,SAAS,cA/BvCrC,EAAQsC,YAAoBtC,G,YCtBb,SAASuC,EAASC,GAC7B,OACI,yBAAK1B,UAAU,YACX,kBAAC2B,EAAA,EAAD,CAAM1B,MAAO,CAAC2B,QAAQ,OAAQZ,MAAO,WAAYa,WAAS,EAACC,QAAS,IAClEJ,EAAMK,MAAMC,OAAS,EAClBN,EAAMK,MAAME,KAAI,SAACtC,EAAMuC,GAAP,OACb,kBAACP,EAAA,EAAD,CAAMQ,IAAKD,EAAOE,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GACjD,kBAAC9C,EAAD,CAAUqB,MAAOpB,EAAKoB,MAAOE,OAAQtB,EAAKsB,OAAQP,IAAKf,EAAKe,UAGhE,O,sDCyCD+B,MA9Cf,WAAgB,IAAD,EACa7C,mBAAS,IADtB,mBACNmC,EADM,KACCW,EADD,KAIbC,qBAAU,WACRC,MAAM,mCACLC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACC,GACLJ,EAASI,MAEVE,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAC1B,IAGA,IAUMlD,EAVYd,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJiE,SAAU,EACV7D,SAAU,QAEZ8D,QAAS,CACPC,QAASC,IAAK,KACdC,UAAWlC,IAAK,SAGJtC,GAElB,OACE,yBAAKgB,UAAU,OACb,gCACE,yBAAKA,UAAWD,EAAQZ,MACpB,kBAACsE,EAAA,EAAD,CAAQC,SAAS,SAASzD,MAAO,CAAC0D,WAAY,YAC1C,kBAACC,EAAA,EAAD,CAAS9C,QAAQ,SACjB,kBAACF,EAAA,EAAD,CAAYE,QAAQ,KAAKb,MAAO,CAACe,MAAO,YAAxC,gCAOV,kBAACS,EAAD,CAAUM,MAAOA,MCtCH8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEd1B,OAAM,SAAA2B,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.bf45259a.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport { makeStyles, createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport {IconButton} from '@material-ui/core'\nimport StarIcon from '@material-ui/icons/Star';\nimport { yellow, grey } from '@material-ui/core/colors';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    maxWidth: 300,\n    maxHeight: 550,\n  },\n  media: {\n    maxWidth: 300,\n    minWidth: 200,\n    maxHeight: 400,\n    minHeight: 250,\n  }}));\n\n//estilos typography\nlet theme = createMuiTheme();\ntheme = responsiveFontSizes(theme);\n\nexport default function BookCard(book) {\n  const [starIcon, setStarIcon] = useState(false);\n  const classes = useStyles();\n  const onClick = () => {\n    setStarIcon(!starIcon)\n  };\n\n  return (\n    <div className=\"BookCard\" style={{textAlign: 'center'}}>\n        <Card className={classes.root} elevation={3}>\n          <CardActionArea>\n                <CardMedia\n                  className={classes.media}\n                  component=\"img\"\n                  alt=\"books\"           \n                  image={book.img}\n                  \n                  />\n              <CardContent theme={theme}>\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                      {book.title}\n                  </Typography>\n                  <Typography variant=\"h6\" color=\"textSecondary\" component=\"p\">\n                      {book.author}\n                  </Typography>\n              </CardContent>\n          </CardActionArea>\n            <CardActions>\n                  <IconButton onClick={onClick} style={{color: starIcon ? yellow[600] : grey[600]}}>\n                    <StarIcon fontSize=\"large\" />\n                  </IconButton>\n            </CardActions>\n        </Card>\n    </div>\n  );\n}","import React from 'react';\nimport BookCard from './BookCard';\nimport Grid from '@material-ui/core/Grid';\n\nexport default function ShowBook(props) {\n    return(\n        <div className=\"ShowBook\">\n            <Grid style={{padding:'24px', color: '#455a64'}} container spacing={10}>\n            {(props.books.length > 0) ? (\n                (props.books.map((book, index) =>\n                    <Grid key={index} item xs={12} sm={4} md={4} lg={4}>\n                    <BookCard title={book.title} author={book.author} img={book.img} />\n                    </Grid>\n                ))\n            ) : null\n            } \n            </Grid>\n        </div>\n    );\n}","import React, {useState, useEffect} from 'react';\nimport ShowBook from './components/ShowBook';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport teal from '@material-ui/core/colors/teal';\nimport grey from '@material-ui/core/colors/grey';\n\nfunction App() {\n  const [books, setBooks] = useState([]);\n\n  //fetch with the backend\n  useEffect(() => {\n    fetch('http://localhost:8888/api/books')\n    .then((response) => {\n      return response.json();\n    })\n    .then((response) => {\n      setBooks(response);\n    })\n    .catch(err => console.log(err))\n  },[]);\n\n  //header\n    const useStyles = makeStyles(theme => ({\n      root: {\n        flexGrow: 6,\n        minWidth: \"100%\",\n      },\n      palette: {\n        primary: teal[400],\n        secondary: grey[800]\n      }\n    }));\n    const classes = useStyles();\n\n  return(\n    <div className=\"App\">\n      <header>\n        <div className={classes.root}>\n            <AppBar position=\"static\" style={{background: '#3f51b5'}}>\n                <Toolbar variant=\"dense\">\n                <Typography variant=\"h6\" style={{color: '#eceff1'}}>\n                  La biblioteca de Sondeos\n                </Typography>\n                </Toolbar>\n            </AppBar>\n        </div>\n      </header>\n      <ShowBook books={books} />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}